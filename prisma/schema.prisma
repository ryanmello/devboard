generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  clerkId   String   @unique
  email     String   @unique
  username  String   @unique
  firstName String?
  lastName  String?
  image     String?
  headline  String?
  resume    String?
  role      String   @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  gitHubUsername   String?
  leetCodeUsername String?
  linkedInUsername String?

  skills     String[]
  projects   Project[]
  education  Education[]
  experience Experience[]
}

model Project {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @db.ObjectId
  name            String
  gitHubUrl       String
  primaryLanguage String
  description     String?
  image           String?
  url             String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Education {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String   @db.ObjectId
  universityName String
  startYear      String
  graduationYear String
  major          String
  minor          String?
  gpa            String?
  image          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Experience {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  company     String
  title       String
  startMonth  String
  startYear   String
  endMonth    String?
  endYear     String?
  isCurrent   Boolean?
  location    String
  type        String
  description String?
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
